import { setZXingModuleOverrides } from "@sec-ant/zxing-wasm/reader";
export declare const BARCODE_DETECTOR_FORMATS: readonly ["aztec", "code_128", "code_39", "code_93", "codabar", "data_matrix", "ean_13", "ean_8", "itf", "pdf417", "qr_code", "upc_a", "upc_e", "unknown"];
export type BarcodeFormat = (typeof BARCODE_DETECTOR_FORMATS)[number];
export interface BarcodeDetectorOptions {
    formats?: BarcodeFormat[];
}
type Point2D = {
    x: number;
    y: number;
};
export interface DetectedBarcode {
    boundingBox: DOMRectReadOnly;
    rawValue: string;
    format: BarcodeFormat;
    cornerPoints: [Point2D, Point2D, Point2D, Point2D];
}
export declare class BarcodeDetector {
    #private;
    constructor(barcodeDectorOptions?: BarcodeDetectorOptions);
    static getSupportedFormats(): Promise<readonly BarcodeFormat[]>;
    detect(image: ImageBitmapSourceWebCodecs): Promise<DetectedBarcode[]>;
}
export { setZXingModuleOverrides };
declare global {
    var BarcodeDetector: {
        readonly prototype: BarcodeDetector;
        new (barcodeDectorOptions?: BarcodeDetectorOptions): BarcodeDetector;
        getSupportedFormats(): Promise<readonly BarcodeFormat[]>;
    };
    interface BarcodeDetector {
        detect(image: ImageBitmapSourceWebCodecs): Promise<DetectedBarcode[]>;
    }
    type BarcodeFormat = (typeof BARCODE_DETECTOR_FORMATS)[number];
    interface BarcodeDetectorOptions {
        formats?: BarcodeFormat[];
    }
    interface DetectedBarcode {
        boundingBox: DOMRectReadOnly;
        rawValue: string;
        format: BarcodeFormat;
        cornerPoints: [Point2D, Point2D, Point2D, Point2D];
    }
}
